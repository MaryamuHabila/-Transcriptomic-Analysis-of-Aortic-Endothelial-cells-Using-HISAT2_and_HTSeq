#!/bin/bash

# Define paths
FASTA="/datastore/home/genomes/igenomes/Homo_sapiens/UCSC/hg38/Sequence/WholeGenomeFasta/genome.fa"
GTF="/datastore/home/genomes/igenomes/Homo_sapiens/UCSC/hg38/Annotation/Archives/archive-2015-08-14-08-18-15/Genes/genes.gtf"
INDEX_PREFIX="Homo_sapiens.GRCh38_index"
OUTPUT_DIR="REVERSE_Hisat2_HAoECs"  # Changed output directory
THREADS=8  # Adjust based on available resources
SAMPLESHEET="Samplesheet_HAoECs.csv"  # Updated samplesheet name
ADAPTERS="adapters/TruSeq3-PE.fa"

# Create necessary directories
mkdir -p "$OUTPUT_DIR" trimmed_data qc_reports adapters logs multiqc_reports

# Step 1: Check and download Trimmomatic adapters if missing
if [ ! -f "$ADAPTERS" ]; then
    echo "Adapter file not found. Downloading..."
    wget -P adapters/ https://raw.githubusercontent.com/timflutre/trimmomatic/master/adapters/TruSeq3-PE.fa
    echo "Adapter file downloaded."
fi

# Step 2: Run FastQC on raw reads
echo "Running FastQC on raw reads..."
tail -n +2 "$SAMPLESHEET" | while IFS=, read -r sample fastq_1 fastq_2 strandedness
do
    fastqc -t "$THREADS" -o qc_reports "$fastq_1" "$fastq_2"
done

# Step 3: Run Trimmomatic for adapter trimming
echo "Running Trimmomatic for adapter trimming..."
tail -n +2 "$SAMPLESHEET" | while IFS=, read -r sample fastq_1 fastq_2 strandedness
do
    trimmomatic PE -threads "$THREADS" \
        "$fastq_1" "$fastq_2" \
        trimmed_data/${sample}_1P.fastq.gz trimmed_data/${sample}_1U.fastq.gz \
        trimmed_data/${sample}_2P.fastq.gz trimmed_data/${sample}_2U.fastq.gz \
        ILLUMINACLIP:"$ADAPTERS":2:30:10 SLIDINGWINDOW:4:20 MINLEN:50
done

# Step 4: Check if HISAT2 index exists
if [ ! -f "${INDEX_PREFIX}.1.ht2" ]; then
    echo "Error: HISAT2 index not found! Ensure the index files exist before running this script."
    exit 1
fi

# Step 5: Align reads using HISAT2
echo "Starting HISAT2 alignment..."
tail -n +2 "$SAMPLESHEET" | while IFS=, read -r sample fastq_1 fastq_2 strandedness
do
    echo "Processing sample: $sample"
    
    # Run HISAT2 and create unsorted BAM file first
    hisat2 -x "$INDEX_PREFIX" \
        -1 trimmed_data/${sample}_1P.fastq.gz \
        -2 trimmed_data/${sample}_2P.fastq.gz \
        --rna-strandness RF \
        --summary-file "$OUTPUT_DIR/${sample}.hisat2.summary.log" \
        --threads "$THREADS" \
        --rg-id "$sample" --rg SM:"$sample" \
        --no-mixed \
        --no-discordant \
        --met-stderr --new-summary --dta \
        | samtools view -bS - > "$OUTPUT_DIR/${sample}.bam"

    # Check if BAM file was successfully created
    if [ ! -s "$OUTPUT_DIR/${sample}.bam" ]; then
        echo "Error: BAM file for $sample is empty. Check logs." | tee -a logs/errors.log
        continue
    fi

    # Sort BAM file
    samtools sort -@ "$THREADS" -o "$OUTPUT_DIR/${sample}.sorted.bam" "$OUTPUT_DIR/${sample}.bam"

    # Index sorted BAM file
    samtools index "$OUTPUT_DIR/${sample}.sorted.bam"

    echo "Alignment completed for $sample."
done

# Step 6: Run MultiQC to aggregate QC reports
echo "Running MultiQC..."
if ! command -v multiqc &> /dev/null; then
    echo "Error: MultiQC is not installed. Please install it before running this script."
    exit 1
fi

multiqc -o multiqc_reports qc_reports "$OUTPUT_DIR" logs

echo "Pipeline completed successfully. MultiQC report saved in 'multiqc_reports'."
